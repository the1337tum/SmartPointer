/**
 * Singly Linked List (SLL) - This is a heavy root class when compared
 * to the extreme lightweight lists, so multi dimensional cost shoots up
 * and must be used sparingly.
 * 
 * --- Requirements ---
 * 
 * None.
 * 
 * --- Use ---
 * 
 *  Using an identifier (ID) is entirely optional
 * 
 *  Note: >> is the right shift operator, to get around this put a space 
 *        in between the greater than signs > >
 *  
 *                local variable
 *  class declaration  |
 *    | pointer type   |      constructor function
 *    |       |        |              |
 * |--------|***|-| |-----|   |--------------------|
 * List<List<int> > 2d_list = new List<List<int> >();
 *  
 * Or you can add dimensions manually for nicer syntax.. 
 *  but is it *really* worth it..?
 * 
 * --- Preformance ---
 * 
 * SLLs preform well when used with small amounts of frequently constructed 
 * and destructed data. They are prone to fragmentation, so excel in 
 * environments where data is already fragmented, frequently changing and 
 * highly varable in size/quantity.
 * 
 * Accessors and mutators
 *  Log(n)  n = the length of the list
 *  But: Lists are extremely cheap to construct, so has a low constant
 *  value, and the list is stored in memory runs 
 *      - taking advantage of fast sequencial access.
 * 
 * Constructors
 *  Substructures are not constructed, so cheap initilisation
 * 
 * Destructors
 *  If you're not clearing up after yourself, you'll get a preformance hit 
 *  at destruction.
**/
